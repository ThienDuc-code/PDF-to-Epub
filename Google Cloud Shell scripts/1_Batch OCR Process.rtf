{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # ===== config =====\
PROJECT="silver-spark-473016-t8"\
LOCATION="eu"\
PROCESSOR_VERSION="projects/99021705772/locations/eu/processors/ddb44ccc2e0a7601/processorVersions/pretrained-ocr-v2.0-2023-06-02"\
\
IN_PREFIX="gs://pdf-ocr-books/HOL_Vol_1_to_12"\
DATE_PREFIX="$(date +%Y-%m-%d)"\
OUT_PREFIX="gs://pdf-ocr-books/docai-output/$\{DATE_PREFIX\}/batch_clean"\
\
ACCESS_TOKEN="$(gcloud auth print-access-token)"\
\
# Collect all PDFs\
mapfile -t PDFS < <(gsutil ls "$\{IN_PREFIX\}/*.pdf")\
if [ $\{#PDFS[@]\} -eq 0 ]; then echo "No PDFs at $\{IN_PREFIX\}"; exit 1; fi\
\
# Build JSON payload for batch\
REQ_FILE="$(mktemp)"\
\{\
  printf '\{ "inputDocuments": \{ "gcsDocuments": \{ "documents": ['\
  first=1\
  for f in "$\{PDFS[@]\}"; do\
    [ $first -eq 0 ] && printf ','\
    printf '\\n  \{ "gcsUri": "%s", "mimeType": "application/pdf" \}' "$f"\
    first=0\
  done\
  printf '\\n] \} \}, "documentOutputConfig": \{ "gcsOutputConfig": \{ "gcsUri": "%s" \} \} \}' "$OUT_PREFIX"\
\} > "$REQ_FILE"\
\
# Kick off batch\
OP_JSON="$(mktemp)"\
curl -sS -X POST \\\
  -H "Authorization: Bearer $\{ACCESS_TOKEN\}" \\\
  -H "Content-Type: application/json; charset=utf-8" \\\
  -d @"$REQ_FILE" \\\
  "https://$\{LOCATION\}-documentai.googleapis.com/v1/$\{PROCESSOR_VERSION\}:batchProcess" \\\
  > "$OP_JSON"\
\
OP_NAME="$(jq -r '.name // empty' "$OP_JSON")"\
[ -z "$OP_NAME" ] && \{ echo "Failed to start batch:"; cat "$OP_JSON"; exit 1; \}\
\
echo "Batch started: $OP_NAME"\
# Poll until done\
while true; do\
  sleep 5\
  curl -sS -H "Authorization: Bearer $\{ACCESS_TOKEN\}" \\\
    "https://$\{LOCATION\}-documentai.googleapis.com/v1/$\{OP_NAME\}" > "$OP_JSON"\
  DONE="$(jq -r '.done // false' "$OP_JSON")"\
  [ "$DONE" = "true" ] && break\
  echo -n "."\
done\
echo; echo "Batch finished."\
\
# Merge per-volume JSON to TXT (same as Plan A)\
SCRATCH="$HOME/docai_text_$\{DATE_PREFIX\}"\
mkdir -p "$SCRATCH"\
command -v jq >/dev/null 2>&1 || \{ sudo apt-get update -y && sudo apt-get install -y jq; \}\
\
while read -r VOL_DIR; do\
  STEM="$(basename "$VOL_DIR" | sed 's#/##')"\
  echo "==> Merging text for $\{STEM\}"\
  mkdir -p "$\{SCRATCH\}/$\{STEM\}"\
  gsutil -m cp "$\{VOL_DIR\}"**.json "$\{SCRATCH\}/$\{STEM\}/" 2>/dev/null || \{ echo "   (no JSONs)"; continue; \}\
  printf '%s\\0' "$\{SCRATCH\}/$\{STEM\}/"*.json \\\
    | sort -z -V \\\
    | xargs -0 -I\{\} jq -r '.text // empty' "\{\}" \\\
    > "$\{SCRATCH\}/$\{STEM\}_ocr.txt"\
  awk 'NF\{p=1\}p' "$\{SCRATCH\}/$\{STEM\}_ocr.txt" > "$\{SCRATCH\}/$\{STEM\}_ocr_clean.txt"\
  gsutil cp "$\{SCRATCH\}/$\{STEM\}_ocr_clean.txt" "$\{VOL_DIR%/\}/$\{STEM\}_ocr.txt"\
  echo "   -> $\{VOL_DIR%/\}/$\{STEM\}_ocr.txt"\
done < <(gsutil ls -d "$\{OUT_PREFIX\}"/*/ 2>/dev/null)\
\
echo "All done. Output under: $\{OUT_PREFIX\}"\
}